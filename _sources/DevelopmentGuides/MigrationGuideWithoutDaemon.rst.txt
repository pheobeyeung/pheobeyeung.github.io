URCap Migration Guide without Daemon
==========================================

This migration guide is aimed to transition a URCap without a daemon process created for Polyscope 5 to fit the structure for Polyscope 6.

Create project inside the DevContainer
----------------------------------------
1. Copy your existing Polyscope 5 project folder into the Polyscope 6 SDK workspace (urcapx-dev folder).
2. Inside the project create a directory with the following naming convention: <**artifactId**>-osgi -> (helloworld-osgi).
3. Move the "src" folder inside the new directory created at 3. .
4. Move the pom.xml file into the new directory created at 3. .
5. If existing, delete the assembly.xml - file.
6. Create the following files in the root directory of the project:
   a. **LICENSE**: Insert your own license in this file as plain text.
   b. **manifest.yaml**: Create a empty yaml file and follow the next section.

Create manifest.yaml file
--------------------------
The manifest.yaml file is linked to the pom.xml file for certain parts. You can use the below sample and change the parts as needed.
ss

.. code-block:: yaml

    apiVersion: urcaps/v1.0
    metadata:
        vendorID: com-ur-urcap-examples
        urcapID: helloworldswing        
        version: "1.0"
        urcapName: Hello World Swing
        vendorName: Universal Robots
        contactInfo: Energivej 25, 5260 Odense S, Denmark
        description: Hello World Swing sample URCap
        copyright: Copyright (C) 2009-2023 Universal Robots. All Rights Reserved
        licenseType: Sample license
    artifacts:
        osgiBundles:
        - name: helloworldswing-osgi 
          bundle: helloworldswing-1.0-SNAPSHOT.jar

+----------------------------------+-----------------------------------+
| pom.xml                          | manifest.yaml                     |
+==================================+===================================+
| groupId, *com.ur.urcap.examples* | vendorID, *com-ur-urcap-examples* |
+----------------------------------+-----------------------------------+
| body row 2                       | ...                               |
+----------------------------------+-----------------------------------+


Copy MyDaemonSwing Example
--------------------------
1. Open the VSCode terminal. This can be toggled with ``ctrl + j`` on Windows and Linux, and ``cmd + j`` for MacOS.
2. Copy MyDaemonSwing to your workspace by running 
   
.. code-block:: bash

    pwd # /workspaces/urcapx-dev
    cp -r /tmp/sdk/samples/swing/com.ur.urcap.examples.mydaemonswing mydaemonswing && cd mydaemonswing

Updated Structure
-----------------
The URCapX project is a multi-module Maven project that adds the original URCap project as a child Maven module. 

Restructure URCap Project
~~~~~~~~~~~~~~~~~~~~~~~~~
1. Create folders for the artifacts in the sample by running 
   
.. code-block:: bash

    mkdir daemon-cpp daemon-py polyscope-ui

2. Move the daemon folder to the daemon-cpp folder by running 

.. code-block:: bash

    mv daemon/ daemon-cpp/

3. Move the *hello-world.py* file to the daemon-py folder by running 

.. code-block:: bash

    mv src/main/resources/com/ur/urcap/examples/mydaemonswing/impl/daemon/hello-world.py daemon-py/

4. Move the *pom.xml* file, src folder, and target folder into the polyscope-ui folder by running 

.. code-block:: bash

    mv src target polyscope-ui/ && mv pom.xml polyscope-ui/

Manifest file
-------------
Create a new file named *manifest.yaml*. Here is the manifest.yaml file for this specific example:

.. code-block:: yaml
    :linenos:

    apiVersion: v1.0
    metadata:
        vendorID: universal-robots
        urcapID: dockerdaemon
        version: "1.0"
        vendorName: Universal Robots
        urcapName: My Daemon Swing
        contactInfo: Energivej 25, 5260 Odense S, Denmark
        description: Daemon Sample URCap
        startup: manual
        copyright: Copyright (c) 2009-2021 Universal Robots. All rights reserved.
        licenseType: Sample license
    artifacts:
        containers:
        - name: daemon-cpp
        image: daemon-cpp:1.0
        ingress:
            - name: xmlrpc
            port: 40405
            protocol: http
            proxyUrl: /
        - name: daemon-py
        image: daemon-py:1.0
            - name: xmlrpc
            port: 40405
            protocol: http
            proxyUrl: /
        osgiBundles:
        - name: polyscope-ui
        bundle: polyscope-ui-1.0-SNAPSHOT.jar        

Artifacts
~~~~~~~~~
osgiBundles
 Specifies a list of java frontend contributions in osgi jar format

+-----------------+--------------------------------------------------------+ 
|     Field       |            Description                                 |
+-----------------+--------------------------------------------------------+ 
|      name       |             name to identify the artifact              |
+-----------------+--------------------------------------------------------+ 
|      bundle     |            name of the jar bundle file                 |
+-----------------+--------------------------------------------------------+ 

containers
 Specifies a list of container contributions

+-----------------+--------------------------------------------------------+ 
|     Field       |            Description                                 |
+-----------------+--------------------------------------------------------+ 
|      name       |             name to identify the artifact              |
+-----------------+--------------------------------------------------------+ 
|      image      |                 name of docker file                    |
+-----------------+--------------------------------------------------------+ 


ingress
 A list of container network configurations, each configuration consists of: name, port, protocol and proxyUrl. The service configured in the ingress will be reachable at a URL defined using this template: <vendorID>/<urcapID>/<container-name>/<ingress-name>. In the above example the REST endpoint can be accessed at: universal-robots/mydaemonswing/daemon-py/xmlrpc/. 

+-----------------+------------------------------------------------------------------------------+ 
|     Field       |                              Description                                     |
+-----------------+------------------------------------------------------------------------------+ 
|      name       |             Name used to reach the service or websocket                      |
+-----------------+------------------------------------------------------------------------------+ 
|      port       |           Container port of the http server in the container                 |
+-----------------+------------------------------------------------------------------------------+ 
|    protocol     |           Specifies the communication protocol.                              |
+-----------------+------------------------------------------------------------------------------+ 
|     proxyUrl    |              Specifies the URL being forwarded to                            |
+-----------------+------------------------------------------------------------------------------+  
|   volumeMounts  |  List of volumes (mountPath) that will be available in the docker container  |
+-----------------+------------------------------------------------------------------------------+ 

Add License File
----------------

A license file is required for the URCap to be valid. 

Create a file called LICENSE in the root of the mydaemonswing project. 

Here is an example template for a LICENSE::

    Copyright (c) <year>, <copyright holder>
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.
    3. All advertising materials mentioning features or use of this software
    must display the following acknowledgement:
    This product includes software developed by the <organization>.
    4. Neither the name of the <organization> nor the
    names of its contributors may be used to endorse or promote products
    derived from this software without specific prior written permission.
    
    THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> ''AS IS'' AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Adjust Artifacts
----------------
Each artifact needs to be adjusted for the new build tool, and the updated Java API.

daemon-cpp
~~~~~~~~~~
A Dockerfile is needed to compile and package the C++ daemon as a Docker image. 

*Note: The Docker daemon sample will compile the C++ image with the CMAKE tool. However, this migration example is done with minimal changes, and still uses SCons. This project will genereate a warning due to the absence of urtool, but will not be an issue becuse it is running inside a container with an updated ABI.*

Create a file called Dockerfile in the *daemon-cpp* folder that was created in the URCap restructuring. 

The Dockerfile should contain the following:

.. code-block:: dockerfile
    :linenos:

    FROM i386/alpine:3.10 as builder
    LABEL description="Build container"
    
    RUN apk update && apk add --no-cache \
        build-base \
        scons
    
    
    RUN apk add --no-cache \
        xmlrpc-c-dev \
        curl-dev
    
    # Copy source files
    COPY daemon/ /usr/local/src/hello-world/
    
    # Specify the working directory
    WORKDIR /usr/local/src/hello-world/
    
    # Compile daemon
    RUN scons -c
    RUN scons release=1
    
    FROM i386/alpine:3.10 as runtime
    LABEL description="Run container"
    
    # Update apps on the base image
    RUN apk update && apk add --no-cache \
        tini \
        libstdc++ \
        xmlrpc-c++
        
    RUN mkdir /usr/local/daemon
    COPY --from=builder /usr/local/src/hello-world/HelloWorld /usr/local/daemon/HelloWorld
    WORKDIR /usr/local/daemon
    
    ENTRYPOINT ["/sbin/tini", "-v", "--"]
    CMD ["./HelloWorld"]
    
    EXPOSE 40405

daemon-py
~~~~~~~~~
A Dockerfile is needed to package the python daemon as a Docker image. 

Create a file called Dockerfile in the *daemon-cpp* folder that was created in the URCap restructuring. 

The Dockerfile should contain the following:

.. code-block:: dockerfile
    :linenos:

    FROM python:3.10-alpine
    
    ENV APP_NAME dockerdaemon
    WORKDIR /usr/local/src/${APP_NAME}
    COPY hello-world.py .
    ENTRYPOINT ["python", "hello-world.py" ]
    EXPOSE 40405

In order to run the Python3 imports, append the following lines of code to the *hello-world.py*:

.. code-block:: python3
    :linenos:

    if sys.version_info.major == 3:
        from xmlrpc.server import SimpleXMLRPCServer
        from socketserver import ThreadingMixIn
    else:
        from SimpleXMLRPCServer import SimpleXMLRPCServer
        from SocketServer import ThreadingMixIn   
 
The IP Address of the *MultithreadedSimpleXMLRPCServer* needs to be changed from localhost (127.0.0.1) to 0.0.0.0. This will bind all external facing interfaces to the container.

.. code-block:: python3

   server = MultithreadedSimpleXMLRPCServer(("0.0.0.0", 40405))  # Adjust IP-address from localhost to 0.0.0.0

polyscope-ui 
~~~~~~~~~~~~

mydaemonswing/polyscope-ui/pom.xml 
''''''''''''''''''''''''''''''''''

The compliation of the C++ daemon is now handled by the *urcapctl* tool. The *pom.xml* file in the *polyscope-ui* directory needs to be updated to reflect this.
The **artifactId** and **name** need to be updated to match the URCapX manifest file:

.. code-block:: xml
    :linenos:

    <groupId>com.ur.urcap.examples</groupId>
    <artifactId>polyscope-ui</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>polyscope-ui</name>
    <packaging>bundle</packaging>

The Java API calls need to be changed to control and get the status of the Docker daemon:

.. code-block:: xml
    :linenos:

    <plugin>
        <configuration>
            <instructions>
                    ...
                    <Import-Package>
                        com.ur.urcap.api*,
                        *
                    </Import-Package>    
                <Embed-Dependency>xmlrpc-client</Embed-Dependency> <!--Add this line to the api package import-->
                <Embed-Transitive>true</Embed-Transitive> <!--Add this line to the api package import-->
            </instructions>
        </configuration>
    </plugin>   

The C++ daemon should no longer be compiled. Remove the following lines:

.. code-block:: xml
    :linenos:

    <execution>
        <id>clean-daemon</id>
        <phase>clean</phase>
        <goals>
            <goal>exec</goal>
        </goals>
        <configuration>
            <executable>scons</executable>
            <arguments>
                <argument>-c</argument>
            </arguments>
            <workingDirectory>./daemon</workingDirectory>
        </configuration>
    </execution>
    
    <execution>
        <id>compile-daemon</id>
        <phase>compile</phase>
        <goals>
            <goal>exec</goal>
        </goals>
        <configuration>
            <executable>scons</executable>
            <arguments>
                <argument>release=1</argument>
            </arguments>
            <workingDirectory>./daemon</workingDirectory>
        </configuration>
    </execution>
    
    <execution>
        <id>copy-daemon</id>
        <phase>compile</phase>
        <goals>
            <goal>exec</goal>
        </goals>
        <configuration>
            <executable>cp</executable>
            <commandlineArgs>daemon/HelloWorld src/main/resources/com/ur/urcap/examples/mydaemonswing/impl/daemon/</commandlineArgs>
            <workingDirectory>.</workingDirectory>
        </configuration>
    </execution>

Adjust the URCap API version by changing the version from 1.3.0 to 1.13.9. The dependency section should resemble the following:

.. code-block:: xml
    :linenos:

    <dependency>
        <groupId>com.ur.urcap</groupId>
        <artifactId>api</artifactId>
        <version>1.13.9</version> 
        <scope>provided</scope>
    </dependency>

Java API 
''''''''
The Java classes need to be modified to accomodate the Docker daemon. The following sections will explain the changes that need to be made to the corresponding classes.

MyDaemonDaemonService.java
~~~~~~~~~~~~~~~~~~~~~~~~~~
Replace the existing MyDaemonDaemonService.java file with the following lines of code:

.. code-block:: java 
    :linenos:

    package com.ur.urcap.examples.mydaemonswing.impl;
    
    
    import com.ur.urcap.api.contribution.docker.DockerContribution;
    import com.ur.urcap.api.contribution.docker.DockerRegistrationService;
    import com.ur.urcap.api.contribution.docker.DockerRegistry;
    
    
    public class MyDaemonDaemonService implements DockerRegistrationService {
    
        public static String DAEMON_ID = "daemon-py";   // or "daemon-cpp"
    
        private DockerContribution dockerContribution;
    
        public MyDaemonDaemonService() {
        }
    
        public DockerContribution getDaemon() {
            return dockerContribution;
        }
    
        @Override
        public void registerDockerContributions(DockerRegistry dockerRegistry) {
            dockerContribution = dockerRegistry.registerDockerContribution(DAEMON_ID);
        }
    }

Activator.java
~~~~~~~~~~~~~~
Change the DaemonService class type to DockerRegistrationService and import the connected package. 

.. code-block:: java
    :linenos:

    package com.ur.urcap.examples.mydaemonswing.impl;
    
    import com.ur.urcap.api.contribution.docker.DockerRegistrationService;                      // Instead of import com.ur.urcap.api.contribution.DaemonService;
    
    <...>
    
    public class Activator implements BundleActivator {
        @Override
        public void start(final BundleContext context) {
            MyDaemonDaemonService daemonService = new MyDaemonDaemonService();
    
            <...>
    
            context.registerService(DockerRegistrationService.class, daemonService, null);      // Exchange the DaemonService - class with the DockerRegistrationService
    
            <...>
    
        }
    }

MyDaemonInstallationNodeContribution.java
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Import the following:

.. code-block:: java
    :linenos:

    <...>
    
    import com.ur.urcap.api.contribution.docker.ContainerStatus;            // Import this package
    
    <...>
    
            xmlRpcDaemonInterface = new XmlRpcMyDaemonInterface();          // In the constructor remove the arguments for creating a new instance of the XmlRpcMyDaemonInterface
    
    <...>
    
        /*
        *  Modify the URL path to the python Daemon in the container
        *  The URL is built using the venderID, urcapID, container name and service name set in the manifest.yaml file.
        *  The servicegateway name means that the container is running on this robot.
        */
        public void generateScript(ScriptWriter writer) {                   
            writer.assign(XMLRPC_VARIABLE, "rpc_factory(\"xmlrpc\", \"http://servicegateway/universal-robots/mydaemonswing/daemon-py/xmlrpc/RPC2\")");
            // Apply the settings to the daemon on program start in the Installation pre-amble
            writer.appendLine(XMLRPC_VARIABLE + ".set_title(\"" + getPopupTitle() + "\")");
        }
    
    
        private void updateUI() {
            ContainerStatus state = getDaemonState();                       //  Replace the DaemonContribution with ContainerStatus
    
            if (state == ContainerStatus.RUNNING) {                         //  Do the same also in this IF - Statement
                view.setStartButtonEnabled(false);
                view.setStopButtonEnabled(true);
            } else {
                view.setStartButtonEnabled(true);
                view.setStopButtonEnabled(false);
            }
    
        <...>
        }
    
    <...>
    
        private void awaitDaemonRunning(long timeOutMilliSeconds) throws InterruptedException {
            daemonService.getDaemon().start();
            long endTime = System.nanoTime() + timeOutMilliSeconds * 1000L * 1000L;
            
            // Replace getState() with getContainerStatus() and DaemonContribution.State.RUNNING with ContainerStatus.RUNNING
            while(System.nanoTime() < endTime && (daemonService.getDaemon().getContainerStatus() != ContainerStatus.RUNNING || !xmlRpcDaemonInterface.isReachable())) {
                Thread.sleep(100);
            }
        }
    
    <...>
    
        public boolean isDefined() {
            return model.isSet(POPUPTITLE_KEY) && getDaemonState() == ContainerStatus.RUNNING; // Change DaemonContribution.State.RUNNING to ContainerStatus.RUNNING
        }
    
    <...>
    
        private ContainerStatus getDaemonState() {
            return daemonService.getDaemon().getContainerStatus();          // Change getState() with getContainerStatus()
        }
    
    <...>

XmlrpcMyDaemonInterface.java 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The XmlRpcMyDaemonInterface method must altered, in order for the NGINX URL to be used in the contribution container.
The arguments for the constructor also need to be removed.

.. code-block:: java
    :linenos:

    <...>
        
        public XmlRpcMyDaemonInterface() {
            XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
            config.setEnabledForExtensions(true);
            try {
                config.setServerURL(new URL("http://servicegateway/universal-robots/mydaemonswing/daemon-py/xmlrpc/RPC2"));  // Here also the URL path for the python daemon needs to be modified
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
            config.setConnectionTimeout(1000); //1s
            client = new XmlRpcClient();
            client.setConfig(config);
        }
    
    <...>

Build and Deploy
----------------

The project can now be built into a URCapX file by navigating to the location of the mydaemonswing within the develpment container.

Build
'''''
Run the following command in the  VSCode terminal:

.. code-block:: bash

    pwd # /workspaces/urcapx-dev
    urcapctl build [urcap_src_dir] [urcapx_dest_dir]

In this specific example, the command would be: 

.. code-block:: bash

    urcapctl build mydaemonswing .

Deploy
''''''
Run the following command in the VSCode terminal to start running URSim:

.. code-block:: bash

    pwd # /workspaces/urcapx-dev
    ./runURSim.sh

The console should output something similar to the screenshot below:
.. image:: ursim_output.png

Run this command to deploy the URCapX file:

.. code-block:: bash

    urcapctl deploy [dest_ip_address] [path_to_urcapx]

If you are deploying to a physical robot, the *dest_ip_address* will be the IP address of the robot. 
If you are deploying to URSim, the *dest_ip_address* will be the URSim docker IP address shown in your console output after starting URSim. 

In order to deploy to the URSim that is shown in the above screenshot, the command would be:

.. code-block:: bash

    urcapctl deploy 172.17.0.3 mydaemonswing.urcapx-dev

You may need to restart URSim after deploying the URCap. You can do so by running:

.. code-block:: bash

    #stop URSim Container
    ./stopURSim.sh
    #start URSim Container
    ./runURSim.sh

Congrats! You have successfully migrated the myDaemonSwing example so that it can build a .urcapx file!
